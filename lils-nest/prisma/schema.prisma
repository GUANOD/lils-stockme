generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cart {
  cart_id                         Int        @id @default(autoincrement())
  cart_price                      Decimal    @db.Decimal(19, 4)
  cart_fullfilled                 Boolean    @default(false)
  cart_delivered                  Boolean    @default(false)
  buyer_id                        Int?
  seller_id                       Int?
  company_cart_buyer_idTocompany  company?   @relation("cart_buyer_idTocompany", fields: [buyer_id], references: [company_id], onDelete: Restrict, onUpdate: Restrict, map: "cart_ibfk_1")
  company_cart_seller_idTocompany company?   @relation("cart_seller_idTocompany", fields: [seller_id], references: [company_id], onDelete: Restrict, onUpdate: Restrict, map: "cart_ibfk_2")
  to_place                        to_place[]

  @@index([buyer_id], map: "buyer_id")
  @@index([seller_id], map: "seller_id")
}

model company {
  company_id                           Int          @id @default(autoincrement())
  company_name                         String       @db.VarChar(50)
  company_reference                    String       @db.VarChar(100)
  company_address                      String       @db.VarChar(100)
  company_type_id                      Int
  company_type                         company_type @relation(fields: [company_type_id], references: [company_type_id], onUpdate: Restrict, map: "company_ibfk_1")
  user                                 user[]       @relation("userTocompany")
  cart_cart_buyer_idTocompany          cart[]       @relation("cart_buyer_idTocompany")
  cart_cart_seller_idTocompany         cart[]       @relation("cart_seller_idTocompany")
  message_companyTomessage_receiver_id message[]    @relation("companyTomessage_receiver_id")
  message_companyTomessage_sender_id   message[]    @relation("companyTomessage_sender_id")
  to_list_companyToto_list_favorite_id to_list[]    @relation("companyToto_list_favorite_id")
  to_list_companyToto_list_owner_id    to_list[]    @relation("companyToto_list_owner_id")
  to_stock                             to_stock[]

  @@index([company_type_id], map: "company_type_id")
}

model company_type {
  company_type_id   Int       @id @default(autoincrement())
  company_type_name String    @db.VarChar(50)
  company           company[]
}

model product {
  product_id          Int               @id @default(autoincrement())
  product_name        String            @db.VarChar(50)
  product_reference   String            @unique(map: "product_reference") @db.VarChar(200)
  product_price       Decimal           @db.Decimal(19, 4)
  product_imagePath   String?           @db.VarChar(50)
  product_category_id Int?
  product_category    product_category? @relation(fields: [product_category_id], references: [product_category_id], onDelete: Restrict, onUpdate: Restrict, map: "product_ibfk_1")
  to_place            to_place[]
  to_stock            to_stock[]

  @@index([product_category_id], map: "product_category_id")
}

model product_category {
  product_category_id   Int       @id @default(autoincrement())
  product_category_name String    @db.VarChar(50)
  product               product[]
}

model role {
  role_id    Int      @id @default(autoincrement())
  role_name  String   @db.VarChar(50)
  role_hours Decimal? @db.Decimal(3, 2)
  user       user[]   @relation("userTorole")
}

model user {
  user_id            Int        @id @default(autoincrement())
  user_name          String     @db.VarChar(50)
  user_username      String     @unique(map: "user_username") @db.VarChar(50)
  user_email         String     @unique(map: "user_email") @db.VarChar(100)
  user_password      String     @db.VarChar(200)
  user_startContract DateTime   @db.Date
  user_endContract   DateTime?  @db.Date
  role_id            Int
  company_id         Int
  role               role       @relation("userTorole", fields: [role_id], references: [role_id], onUpdate: Restrict, map: "_user_ibfk_1")
  company            company    @relation("userTocompany", fields: [company_id], references: [company_id], onUpdate: Restrict, map: "_user_ibfk_2")
  schedule           schedule[] @relation("userToschedule")
  deleted            Boolean    @default(false)

  @@index([company_id], map: "company_id")
  @@index([role_id], map: "role_id")
  @@map("_user")
}

model message {
  message_id                           Int      @id @default(autoincrement())
  message_date                         DateTime @db.DateTime(0)
  message_content                      String   @db.VarChar(160)
  receiver_id                          Int?
  sender_id                            Int?
  ticket_id                            Int
  company_companyTomessage_receiver_id company? @relation("companyTomessage_receiver_id", fields: [receiver_id], references: [company_id], onDelete: Restrict, onUpdate: Restrict, map: "message_ibfk_1")
  company_companyTomessage_sender_id   company? @relation("companyTomessage_sender_id", fields: [sender_id], references: [company_id], onDelete: Restrict, onUpdate: Restrict, map: "message_ibfk_2")
  ticket                               ticket   @relation(fields: [ticket_id], references: [ticket_id], onUpdate: Restrict, map: "message_ibfk_3")
  deleted                               Boolean @default(false)
  @@index([receiver_id], map: "receiver_id")
  @@index([sender_id], map: "sender_id")
  @@index([ticket_id], map: "ticket_id")
}

model schedule {
  schedule_id   Int      @id @default(autoincrement())
  scheule_start DateTime @db.DateTime(0)
  schedule_end  DateTime @db.DateTime(0)
  user_id       Int?
  user          user?    @relation("userToschedule", fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "schedule_ibfk_1")
  deleted       Boolean  @default(false)
  @@index([user_id], map: "user_id")
}

model ticket {
  ticket_id  Int       @id @default(autoincrement())
  open_date  DateTime  @db.DateTime(0)
  close_date DateTime? @db.DateTime(0)
  isResolved Boolean   @default(false)
  deleted    Boolean   @default(false)
  message    message[]
}

model to_list {
  favorite_id                          Int
  owner_id                             Int
  is_favorite                          Boolean
  date_added                           DateTime? @db.DateTime(0)
  company_companyToto_list_favorite_id company   @relation("companyToto_list_favorite_id", fields: [favorite_id], references: [company_id], onUpdate: Restrict, map: "to_list_ibfk_1")
  company_companyToto_list_owner_id    company   @relation("companyToto_list_owner_id", fields: [owner_id], references: [company_id], onUpdate: Restrict, map: "to_list_ibfk_2")

  @@id([favorite_id, owner_id])
  @@index([owner_id], map: "owner_id")
}

model to_place {
  cart_id    Int
  product_id Int
  quantity   Int
  cart       cart    @relation(fields: [cart_id], references: [cart_id], onUpdate: Restrict, map: "to_place_ibfk_1")
  product    product @relation(fields: [product_id], references: [product_id], onUpdate: Restrict, map: "to_place_ibfk_2")

  @@id([cart_id, product_id])
  @@index([product_id], map: "product_id")
}

model to_stock {
  company_id Int
  product_id Int
  quantity   Int
  company    company @relation(fields: [company_id], references: [company_id], onUpdate: Restrict, map: "to_stock_ibfk_1")
  product    product @relation(fields: [product_id], references: [product_id], onUpdate: Restrict, map: "to_stock_ibfk_2")

  @@id([company_id, product_id])
  @@index([product_id], map: "product_id")
}
